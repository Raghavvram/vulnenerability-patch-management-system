#!/bin/bash
# deploy_vulnerability_management.sh

export PERPLEXITY_API_KEY="" # place your key here
export NVD_API_KEY="" # place your key here


set -euo pipefail  # Exit on error, unset variable, or failed pipe
trap 'echo "Deployment failed at line $LINENO"; exit 1' ERR


echo "\n========== Vulnerability Management System Deployment =========="


# Phase 1: Environment Setup
echo "\n[Phase 1] Setting up environment..."

# Check for required commands
for cmd in docker docker-compose openssl curl; do
  if ! command -v $cmd &>/dev/null; then
    echo "ERROR: Required command '$cmd' not found. Please install it."
    exit 1
  fi
done

# Ensure Docker daemon is running
if ! docker info &>/dev/null; then
  echo "ERROR: Docker daemon is not running. Please start Docker."
  exit 1
fi




# Phase 2: Clone and Setup Repository
echo "\n[Phase 2] Setting up application code..."


# (Optional) Python environment setup
# if [ ! -d "venv" ]; then
#     python3 -m venv venv
# fi
# source venv/bin/activate
# pip install -r requirements.txt


# Phase 3: Configuration
echo "\n[Phase 3] Configuring services..."


# Create environment configuration
cat > .env << EOF
# Database Configuration
POSTGRES_DB=vulndb
POSTGRES_USER=vulnuser
POSTGRES_PASSWORD=$(openssl rand -base64 32)

# Redis Configuration
REDIS_PASSWORD=$(openssl rand -base64 32)

# Perplexity API Configuration
PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}

# NVD API Configuration
NVD_API_KEY=${NVD_API_KEY}

# Grafana Configuration
GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=$(openssl rand -base64 16)

# Application Configuration
SECRET_KEY=$(openssl rand -base64 32)
LOG_LEVEL=INFO
EOF


# Phase 4: Database Initialization
echo "\n[Phase 4] Initializing database..."

docker-compose up -d postgres redis
echo "Waiting for database and cache to be healthy..."
for i in {1..10}; do
  sleep 5
  POSTGRES_HEALTH=$(docker inspect --format='{{json .State.Health.Status}}' vuln-patch-management-postgres-1 2>/dev/null || echo "")
  REDIS_HEALTH=$(docker inspect --format='{{json .State.Health.Status}}' vuln-patch-management-redis-1 2>/dev/null || echo "")
  if [[ "$POSTGRES_HEALTH" == '"healthy"' && "$REDIS_HEALTH" == '"healthy"' ]]; then
    echo "Postgres and Redis are healthy."
    break
  fi
  if [[ $i -eq 10 ]]; then
    echo "ERROR: Postgres or Redis did not become healthy in time."
    exit 1
  fi
done



# Phase 5: Service Deployment
echo "\n[Phase 5] Deploying services..."

docker-compose up -d
echo "Waiting for all services to be healthy..."
for service in main_orchestrator parser_service enricher_service llm_service prioritization_engine; do
  for i in {1..10}; do
    sleep 5
    HEALTH=$(docker inspect --format='{{json .State.Health.Status}}' vuln-patch-management-${service}-1 2>/dev/null || echo "")
    if [[ "$HEALTH" == '"healthy"' ]]; then
      echo "$service is healthy."
      break
    fi
    if [[ $i -eq 10 ]]; then
      echo "ERROR: $service did not become healthy in time."
      exit 1
    fi
  done
done


# Phase 6: Verification
echo "\n[Phase 6] Verifying deployment..."

# Check service health endpoints
for port in 8000; do
  if ! curl -sf http://localhost:$port/health; then
    echo "ERROR: Service on port $port failed health check."
    exit 1
  fi
  echo "Service on port $port passed health check."
done


bash test_nmap_scan_and_submit.sh
echo "Deployment completed successfully!"
echo "Access Grafana dashboard at: http://localhost:3000"
echo "Default credentials - admin:${GF_SECURITY_ADMIN_PASSWORD}"

# Phase 7: Monitoring Setup
echo "\n[Phase 7] Setting up monitoring..."

# Export Grafana admin password from .env if available
if [ -f .env ]; then
  export GF_SECURITY_ADMIN_PASSWORD=$(grep GF_SECURITY_ADMIN_PASSWORD .env | cut -d'=' -f2)
fi

# Import Grafana dashboard
if curl -sf -X POST \
  http://admin:${GF_SECURITY_ADMIN_PASSWORD}@localhost:3000/api/dashboards/db \
  -H 'Content-Type: application/json' \
  -d @monitoring/grafana/dashboards/vulnerability-management.json; then
  echo "Grafana dashboard imported successfully."
else
  echo "WARNING: Failed to import Grafana dashboard."
fi

# Copy Grafana dashboard to Grafana container if running
GRAFANA_CONTAINER=$(docker ps --filter "name=grafana" --format "{{.Names}}" | head -n1)
if [ -n "$GRAFANA_CONTAINER" ]; then
  docker cp monitoring/grafana/dashboards/vulnerability-management.json "$GRAFANA_CONTAINER":/var/lib/grafana/dashboards/vulnerability-management.json && \
  echo "Dashboard file copied to Grafana container." || \
  echo "WARNING: Failed to copy dashboard file to Grafana container."
else
  echo "WARNING: Grafana container not running, dashboard file not copied."
fi

# Run Nmap scan and submit test
if bash test_nmap_scan_and_submit.sh; then
  echo "Nmap scan and submit test completed successfully."
else
  echo "WARNING: Nmap scan and submit test failed."
fi

echo "\n========== Deployment completed successfully! =========="
echo "Access Grafana dashboard at: http://localhost:3000"
echo "Default credentials - admin:${GF_SECURITY_ADMIN_PASSWORD}"

